package com.itraing.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itraing.greendao.DeviceBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEVICE_BEAN.
*/
public class DeviceBeanDao extends AbstractDao<DeviceBean, String> {

    public static final String TABLENAME = "DEVICE_BEAN";

    /**
     * Properties of entity DeviceBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UUIDString = new Property(0, String.class, "UUIDString", true, "UUIDSTRING");
        public final static Property TagName = new Property(1, String.class, "tagName", false, "TAG_NAME");
        public final static Property ImageName = new Property(2, String.class, "imageName", false, "IMAGE_NAME");
        public final static Property WarnVoiceLevel = new Property(3, int.class, "warnVoiceLevel", false, "WARN_VOICE_LEVEL");
        public final static Property FindVoiceLevel = new Property(4, int.class, "findVoiceLevel", false, "FIND_VOICE_LEVEL");
        public final static Property WarnLight = new Property(5, boolean.class, "warnLight", false, "WARN_LIGHT");
        public final static Property FindLight = new Property(6, boolean.class, "findLight", false, "FIND_LIGHT");
        public final static Property WarnVoice = new Property(7, String.class, "warnVoice", false, "WARN_VOICE");
        public final static Property FindVoice = new Property(8, String.class, "findVoice", false, "FIND_VOICE");
        public final static Property WarnStatus = new Property(9, boolean.class, "warnStatus", false, "WARN_STATUS");
    };


    public DeviceBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEVICE_BEAN' (" + //
                "'UUIDSTRING' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: UUIDString
                "'TAG_NAME' TEXT NOT NULL ," + // 1: tagName
                "'IMAGE_NAME' TEXT NOT NULL ," + // 2: imageName
                "'WARN_VOICE_LEVEL' INTEGER NOT NULL ," + // 3: warnVoiceLevel
                "'FIND_VOICE_LEVEL' INTEGER NOT NULL ," + // 4: findVoiceLevel
                "'WARN_LIGHT' INTEGER NOT NULL ," + // 5: warnLight
                "'FIND_LIGHT' INTEGER NOT NULL ," + // 6: findLight
                "'WARN_VOICE' TEXT NOT NULL ," + // 7: warnVoice
                "'FIND_VOICE' TEXT NOT NULL ," + // 8: findVoice
                "'WARN_STATUS' INTEGER NOT NULL );"); // 9: warnStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEVICE_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DeviceBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUUIDString());
        stmt.bindString(2, entity.getTagName());
        stmt.bindString(3, entity.getImageName());
        stmt.bindLong(4, entity.getWarnVoiceLevel());
        stmt.bindLong(5, entity.getFindVoiceLevel());
        stmt.bindLong(6, entity.getWarnLight() ? 1l: 0l);
        stmt.bindLong(7, entity.getFindLight() ? 1l: 0l);
        stmt.bindString(8, entity.getWarnVoice());
        stmt.bindString(9, entity.getFindVoice());
        stmt.bindLong(10, entity.getWarnStatus() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DeviceBean readEntity(Cursor cursor, int offset) {
        DeviceBean entity = new DeviceBean( //
            cursor.getString(offset + 0), // UUIDString
            cursor.getString(offset + 1), // tagName
            cursor.getString(offset + 2), // imageName
            cursor.getInt(offset + 3), // warnVoiceLevel
            cursor.getInt(offset + 4), // findVoiceLevel
            cursor.getShort(offset + 5) != 0, // warnLight
            cursor.getShort(offset + 6) != 0, // findLight
            cursor.getString(offset + 7), // warnVoice
            cursor.getString(offset + 8), // findVoice
            cursor.getShort(offset + 9) != 0 // warnStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DeviceBean entity, int offset) {
        entity.setUUIDString(cursor.getString(offset + 0));
        entity.setTagName(cursor.getString(offset + 1));
        entity.setImageName(cursor.getString(offset + 2));
        entity.setWarnVoiceLevel(cursor.getInt(offset + 3));
        entity.setFindVoiceLevel(cursor.getInt(offset + 4));
        entity.setWarnLight(cursor.getShort(offset + 5) != 0);
        entity.setFindLight(cursor.getShort(offset + 6) != 0);
        entity.setWarnVoice(cursor.getString(offset + 7));
        entity.setFindVoice(cursor.getString(offset + 8));
        entity.setWarnStatus(cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DeviceBean entity, long rowId) {
        return entity.getUUIDString();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DeviceBean entity) {
        if(entity != null) {
            return entity.getUUIDString();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
