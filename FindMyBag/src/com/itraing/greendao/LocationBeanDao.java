package com.itraing.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itraing.greendao.LocationBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCATION_BEAN.
*/
public class LocationBeanDao extends AbstractDao<LocationBean, Long> {

    public static final String TABLENAME = "LOCATION_BEAN";

    /**
     * Properties of entity LocationBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UUIDString = new Property(1, String.class, "UUIDString", false, "UUIDSTRING");
        public final static Property TagName = new Property(2, String.class, "tagName", false, "TAG_NAME");
        public final static Property ImageName = new Property(3, String.class, "imageName", false, "IMAGE_NAME");
        public final static Property LostTime = new Property(4, java.util.Date.class, "lostTime", false, "LOST_TIME");
        public final static Property LostDay = new Property(5, String.class, "lostDay", false, "LOST_DAY");
        public final static Property LostLot = new Property(6, double.class, "lostLot", false, "LOST_LOT");
        public final static Property LostLat = new Property(7, double.class, "lostLat", false, "LOST_LAT");
        public final static Property LostAddress = new Property(8, String.class, "lostAddress", false, "LOST_ADDRESS");
    };


    public LocationBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocationBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCATION_BEAN' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'UUIDSTRING' TEXT NOT NULL ," + // 1: UUIDString
                "'TAG_NAME' TEXT NOT NULL ," + // 2: tagName
                "'IMAGE_NAME' TEXT NOT NULL ," + // 3: imageName
                "'LOST_TIME' INTEGER NOT NULL ," + // 4: lostTime
                "'LOST_DAY' TEXT NOT NULL ," + // 5: lostDay
                "'LOST_LOT' REAL NOT NULL ," + // 6: lostLot
                "'LOST_LAT' REAL NOT NULL ," + // 7: lostLat
                "'LOST_ADDRESS' TEXT NOT NULL );"); // 8: lostAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCATION_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUUIDString());
        stmt.bindString(3, entity.getTagName());
        stmt.bindString(4, entity.getImageName());
        stmt.bindLong(5, entity.getLostTime().getTime());
        stmt.bindString(6, entity.getLostDay());
        stmt.bindDouble(7, entity.getLostLot());
        stmt.bindDouble(8, entity.getLostLat());
        stmt.bindString(9, entity.getLostAddress());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LocationBean readEntity(Cursor cursor, int offset) {
        LocationBean entity = new LocationBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // UUIDString
            cursor.getString(offset + 2), // tagName
            cursor.getString(offset + 3), // imageName
            new java.util.Date(cursor.getLong(offset + 4)), // lostTime
            cursor.getString(offset + 5), // lostDay
            cursor.getDouble(offset + 6), // lostLot
            cursor.getDouble(offset + 7), // lostLat
            cursor.getString(offset + 8) // lostAddress
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocationBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUUIDString(cursor.getString(offset + 1));
        entity.setTagName(cursor.getString(offset + 2));
        entity.setImageName(cursor.getString(offset + 3));
        entity.setLostTime(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setLostDay(cursor.getString(offset + 5));
        entity.setLostLot(cursor.getDouble(offset + 6));
        entity.setLostLat(cursor.getDouble(offset + 7));
        entity.setLostAddress(cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LocationBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LocationBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
